
Решил сделать краткий план по урокам на русском, чтоб легче было повторять, что
мы сделали в том или ином уроке :)

Урок 6:
    Пока идет разминка. Мы в шестом уроке удалили функцию App из файла App.js
    (с изначальным кодом реакта - приветственная картинка) и создали новую
    стрелочную функцию App c двумя дивками и ol-списком и пунктами - HTML, CSS,
    JS, REACT, JSX. Также поменяли стили в файле App.css

Урок 7:
    В index.html добавили "before" и "after" перед и после div#root. В файле App
    .js создали две новые компоненты Header и Technologies и вставили их теги в
    компоненту App. Стили также малость поменяли в App.css

Урок 8:
    Убрали в index.html лишний текст около div#root. И прослушали теорию по
    импортам и экспортам :)

Урок 9:
    Создали в srс-папке файлы Header.js и Technologies.js в них поместили наши
    одноименные компоненты, в каждом из этих файлов написали экспорт: export
    default 'componentName'. А в файле App.js написали импорты наших компонент:
    import componentName from 'path' (два импорта, понятное дело)
    Димыч говорит, что в каждый файл с отдельной компонентой (чтоб работал JSX)
    нужно обязательно экспортировать модуль реакта: import React from 'react'.
    Но странное дело, у меня все работает и без этого модуля, так что я его не
    импортировал в файлы-компоненты
    Еще один момент, в реакте нужно создавать файлы с расширением jsx, a я
    создал - js, но все работает также хорошо!!!

Урок 10:
    При импорте компоненты по дефолту: import componentName from 'path' - имя
    componentName может быть любым, т е необязательно должно соответствовать
    имени экспорта компоненты, главное именно его использовать в теге компоненты
    Это может привести к ошибкам, поэтому нужно быть очень внимательным и
    понимать откуда мы импортируем. Лучше использовать подсказки редактора

Урок 11:
    С этого урока мы начинаем создавать социальную сеть, поэтому предыдущий
    учебный код удаляем. И вначале верстаем все в одном файле App.js
    Тут у меня получилась совсем другая структура нежели у Димыча, так как я
    использую флексы, а он гриды. Основные элементы внешнего вида нашей сети -
    это Хедер - сверху, и ниже - навигационный бар - слева и контент - справа.
    С помощью гридов можно именно так и расположить элементы, а с помощью
    флексов, я так понимаю, нет (неохота вводит двухстрочный флекс). С помощью
    флексов  понадобится ввести дополнительный тег (я ввиду - <main>),
    объединяющий бар и контент.
    Я сделаю две ветки в гит, в одной я переделаю проект как делаю по своей
    структуре папок-файлов, а в другой попробую делать также (почти также) на
    флексах, но соответствовать структуре Димыча - вот такая мысля. И давать два
     разных описания.

    Итак, у нас получилось длинное полотно, плюс я добавил стили

Урок 12:
    Итак, иду за структурой Димыча. Создал папку для компонентов - 'components'
    и три компоненты - Header, Navbar, Profile (вместо content - поскольку это
    область будет меняться при нажатии ссылок из навбара, то и названия
    компонент, которые 'отвечают' за эту область назовем согласно ссылкам).
    Компоненты разложил по соответственным файлам созданных в папке, сделал
    импорты и экспорты

Урок 13: гит изучаем :)

Урок 14:
    Создаем модули css и импортируем их в jsx-файлы к компонентам (а не в App
    .js - как я вначале сделал) А экспорт из css-файлов не нужен!
    Файлы name.module.css кладем в папку components

Урок 15:
    Наводим порядок. Внутри папки 'components' создаем папки Header, Navbar,
    Profile и в них кладем пары наших файлов name.jsx и name.module.css. Мы
    также сделали компоненту MYPost (из дива с надписью - MyPost), создали
    папку MyPost внутри папки Profile и положили компоненту в одноименную папку
     Далее вместо надписи New post сделали текстареа и кнопку Add post (это уже
     в компоненте MyPost). И сделали компоненту Post, она будет лежать в папке
     Post, которая в свою очередь лежит в папке MyPost. Т е мы хорошо так
     раздробили код в компоненты. Добавили в Post аватарку
